/**
 * Template Validation Schemas
 * Story 3.4: Template CRUD API Endpoints
 *
 * Zod schemas for validating Epic 3 template requests.
 * Epic 3 schema (denormalized):
 * - Template: { id, user_id, name, fields: TemplateField[], extraction_prompt }
 * - TemplateField: { id, name, instructions?, order }
 *
 * Validation Requirements (from Tech Spec):
 * - Template name: 1-100 characters, required
 * - Fields array: Minimum 1 field, required
 * - Field name: 1-100 characters, required
 * - Field instructions: 0-500 characters, optional
 * - Extraction prompt: 0-2000 characters, optional
 */

import { z } from 'zod';

/**
 * Template Field Schema (Epic 3)
 *
 * Validates individual field objects within the fields JSONB array.
 *
 * Structure:
 * {
 *   id: string (UUID generated client-side)
 *   name: string (1-100 chars, required)
 *   instructions: string (0-500 chars, optional)
 *   order: number (integer, determines display order)
 * }
 */
export const TemplateFieldSchema = z.object({
  id: z.string().uuid('Field ID must be a valid UUID'),
  name: z
    .string()
    .min(1, 'Field name is required')
    .max(100, 'Field name must be 100 characters or less')
    .trim(),
  instructions: z
    .string()
    .max(500, 'Field instructions must be 500 characters or less')
    .trim()
    .optional()
    .or(z.literal('')),  // Allow empty string as equivalent to undefined
  order: z
    .number()
    .int('Field order must be an integer')
    .min(0, 'Field order must be non-negative')
});

/**
 * Create Template Schema (Epic 3)
 *
 * Validates POST /api/templates request body.
 *
 * Required fields:
 * - name: Template name (1-100 chars)
 * - fields: Array of at least 1 field
 *
 * Optional fields:
 * - extraction_prompt: Custom AI extraction prompt (0-2000 chars)
 *
 * NOT included (auto-managed):
 * - id: Generated by database (uuid_generate_v4())
 * - user_id: Set automatically from auth.uid() via RLS
 * - created_at: Set by database default (NOW())
 * - updated_at: Set by database default (NOW())
 */
export const CreateTemplateSchema = z.object({
  name: z
    .string()
    .min(1, 'Template name is required')
    .max(100, 'Template name must be 100 characters or less')
    .trim(),
  fields: z
    .array(TemplateFieldSchema)
    .min(1, 'At least one field is required')
    .max(50, 'Maximum 50 fields allowed per template'),  // Reasonable limit
  extraction_prompt: z
    .string()
    .max(2000, 'Extraction prompt must be 2000 characters or less')
    .trim()
    .optional()
    .or(z.literal(''))  // Allow empty string as equivalent to undefined
});

/**
 * Update Template Schema (Epic 3)
 *
 * Validates PUT /api/templates/:id request body.
 *
 * All fields are optional (partial update support).
 * - name: Template name (1-100 chars)
 * - fields: Array of at least 1 field (if provided)
 * - extraction_prompt: Custom AI extraction prompt (0-2000 chars)
 *
 * NOT allowed to update:
 * - id: Immutable identifier
 * - user_id: Cannot transfer template ownership
 * - created_at: Immutable timestamp
 * - updated_at: Auto-updated by database trigger
 */
export const UpdateTemplateSchema = CreateTemplateSchema.partial();

/**
 * Template ID Parameter Schema
 *
 * Validates template ID from URL parameters (/api/templates/:id).
 *
 * Ensures ID is a valid UUID before querying database.
 * Returns 400 Bad Request if invalid UUID format.
 */
export const TemplateIdSchema = z.string().uuid('Invalid template ID format');

/**
 * Type Exports
 *
 * Export TypeScript types inferred from Zod schemas for use in API routes.
 */
export type TemplateField = z.infer<typeof TemplateFieldSchema>;
export type CreateTemplateRequest = z.infer<typeof CreateTemplateSchema>;
export type UpdateTemplateRequest = z.infer<typeof UpdateTemplateSchema>;

/**
 * Validation Helper Functions
 */

/**
 * Validate and parse create template request
 *
 * @param data - Request body to validate
 * @returns Parsed and validated data or throws ZodError
 */
export function validateCreateTemplate(data: unknown): CreateTemplateRequest {
  return CreateTemplateSchema.parse(data);
}

/**
 * Validate and parse update template request
 *
 * @param data - Request body to validate
 * @returns Parsed and validated data or throws ZodError
 */
export function validateUpdateTemplate(data: unknown): UpdateTemplateRequest {
  return UpdateTemplateSchema.parse(data);
}

/**
 * Validate template ID parameter
 *
 * @param id - Template ID from URL parameter
 * @returns Validated UUID string or throws ZodError
 */
export function validateTemplateId(id: string): string {
  return TemplateIdSchema.parse(id);
}

/**
 * Safe validation with error handling
 *
 * Returns { success: true, data } or { success: false, error }
 * Useful for API routes that want to handle validation errors gracefully.
 */
export function safeValidateCreateTemplate(data: unknown) {
  return CreateTemplateSchema.safeParse(data);
}

export function safeValidateUpdateTemplate(data: unknown) {
  return UpdateTemplateSchema.safeParse(data);
}

export function safeValidateTemplateId(id: string) {
  return TemplateIdSchema.safeParse(id);
}
