<story-context id="bmad/bmm/workflows/4-implementation/story-context/template" v="1.0">
  <metadata>
    <epicId>3</epicId>
    <storyId>3.6</storyId>
    <title>File Upload Section (Single File)</title>
    <status>Ready</status>
    <generatedAt>2025-10-25</generatedAt>
    <generator>BMAD Story Context Workflow</generator>
    <sourceStoryPath>docs/stories/story-3.6.md</sourceStoryPath>
  </metadata>

  <story>
    <asA>user</asA>
    <iWant>to upload a single file to test the unified interface</iWant>
    <soThat>I can validate the basic extraction flow works</soThat>
    <tasks>
      - Create FileUploadSection component in app/extract/components/
      - Integrate react-dropzone for drag-and-drop
      - Implement file validation and error handling
      - Create file display card showing filename, size, page count placeholder
      - Implement visual states (empty, uploading, uploaded, error)
      - Connect to Zustand store with uploadedFile state
      - Testing: drag-drop, file picker, validation, visual states
    </tasks>
  </story>

  <acceptanceCriteria>
    <criterion id="1">File upload section in left panel below template section</criterion>
    <criterion id="2">React-dropzone integrated for drag-and-drop</criterion>
    <criterion id="3">Click-to-browse file picker</criterion>
    <criterion id="4">Accept: PDF files only (for now)</criterion>
    <criterion id="5">Max size: 10MB with error display</criterion>
    <criterion id="6">File display shows: filename, size, page count (placeholder for now)</criterion>
    <criterion id="7">Remove file button [Ã—]</criterion>
    <criterion id="8">Visual states: empty, uploading, uploaded, error</criterion>
    <criterion id="9">File stored in Zustand state as File object</criterion>
    <criterion id="10">Upload area uses card with dashed border</criterion>
  </acceptanceCriteria>

  <artifacts>
    <docs>
      <doc>
        <path>docs/epics.md</path>
        <title>Epic Breakdown</title>
        <section>Story 3.6: File Upload Section (Single File)</section>
        <snippet>As a user, I want to upload a single file to test the unified interface. Prerequisites: Story 3.1 complete. Part of Phase 1: Foundation (Weeks 1-2).</snippet>
      </doc>
      <doc>
        <path>docs/tech-spec-epic-3.md</path>
        <title>Epic 3 Technical Specification</title>
        <section>AC3: Batch File Upload</section>
        <snippet>Multi-file upload accepts 1-100 PDF files via drag-and-drop or click-to-browse. File list shows: filename, size, page count, status indicator. Max 100 files with validation error if exceeded.</snippet>
      </doc>
      <doc>
        <path>docs/PRD.md</path>
        <title>Product Requirements Document</title>
        <section>Document Processing Requirements</section>
        <snippet>FR008: System shall provide a file upload interface accepting PDF, Word (.doc, .docx), and text file formats. FR009: System shall process both clean and scanned documents.</snippet>
      </doc>
    </docs>
    <code>
      <artifact>
        <path>stores/extractionStore.ts</path>
        <kind>store</kind>
        <symbol>useExtractionStore</symbol>
        <lines>1-150</lines>
        <reason>Zustand store for extraction workflow state management. Needs extension for uploadedFile state. Already has template state, panel state. Pattern to follow for new state.</reason>
      </artifact>
      <artifact>
        <path>app/extract/ExtractPageClient.tsx</path>
        <kind>component</kind>
        <symbol>ExtractPageClient</symbol>
        <lines>1-100</lines>
        <reason>Main client component with left panel. FileUploadSection will be added below FieldTagsArea in the left panel ResizablePanel.</reason>
      </artifact>
      <artifact>
        <path>app/extract/components/FieldTagsArea.tsx</path>
        <kind>component</kind>
        <symbol>FieldTagsArea</symbol>
        <lines>1-50</lines>
        <reason>Example of Epic 3 component pattern. FileUploadSection should follow similar structure, styling, and Zustand integration.</reason>
      </artifact>
      <artifact>
        <path>app/templates/new/page.tsx</path>
        <kind>component</kind>
        <symbol>NewTemplatePage</symbol>
        <lines>135-208</lines>
        <reason>Reference implementation of react-dropzone from Story 1.6. Shows PDF upload pattern with validation, error handling, file display. Can be adapted for Story 3.6.</reason>
      </artifact>
      <artifact>
        <path>app/process/page.tsx</path>
        <kind>component</kind>
        <symbol>ProcessPage</symbol>
        <lines>1-100</lines>
        <reason>Reference implementation from Story 2.1 showing production document upload with react-dropzone. Another example of file upload pattern.</reason>
      </artifact>
    </code>
    <dependencies>
      <dependency ecosystem="npm">
        <package name="react-dropzone" version="^14.3.8" />
        <package name="zustand" version="^4.5.7" />
        <package name="lucide-react" version="^0.546.0" />
        <package name="next" version="^14.2.0" />
        <package name="react" version="^18.2.0" />
      </dependency>
    </dependencies>
  </artifacts>

  <constraints>
    <constraint>Component must be created in app/extract/components/ to maintain consistency with Epic 3 architecture</constraint>
    <constraint>Must use existing extractionStore from Story 3.1 - extend with uploadedFile state, setUploadedFile, and removeUploadedFile actions</constraint>
    <constraint>Use Tailwind CSS classes consistent with existing UI from Stories 3.1-3.5 (Card with dashed border: border-2 border-dashed)</constraint>
    <constraint>Follow ShadCN component patterns - use Card, Button, and Alert components if needed</constraint>
    <constraint>File stored in memory only - no server upload in this story (Story 3.8 will add multi-file, Story 3.11 will add server processing)</constraint>
    <constraint>PDF only for now - multi-format support deferred. Use accept prop: { 'application/pdf': ['.pdf'] }</constraint>
    <constraint>Max file size 10MB (10485760 bytes) - must validate and show user-friendly error</constraint>
    <constraint>Page count is placeholder ("-- pages") - actual PDF parsing comes in Story 3.9</constraint>
  </constraints>

  <interfaces>
    <interface>
      <name>ExtractionStore Extension</name>
      <kind>zustand-store</kind>
      <signature>
        interface ExtractionStore {
          // Add to existing store:
          uploadedFile: File | null
          setUploadedFile: (file: File | null) => void
          removeUploadedFile: () => void
        }
      </signature>
      <path>stores/extractionStore.ts</path>
    </interface>
    <interface>
      <name>react-dropzone Configuration</name>
      <kind>library-config</kind>
      <signature>
        useDropzone({
          accept: { 'application/pdf': ['.pdf'] },
          maxSize: 10485760, // 10MB
          multiple: false,
          onDrop: (acceptedFiles: File[]) => void,
          onDropRejected: (fileRejections: FileRejection[]) => void
        })
      </signature>
      <path>app/extract/components/FileUploadSection.tsx</path>
    </interface>
    <interface>
      <name>FileUploadSection Component Props</name>
      <kind>react-component</kind>
      <signature>
        interface FileUploadSectionProps {
          // No props needed - component reads/writes directly to Zustand store
        }
        export default function FileUploadSection(): JSX.Element
      </signature>
      <path>app/extract/components/FileUploadSection.tsx</path>
    </interface>
  </interfaces>

  <tests>
    <standards>
      TypeScript strict mode enabled. Build must pass with zero errors. Lint must pass with zero warnings. Manual testing required for drag-and-drop interactions and visual states.
    </standards>
    <locations>
      Manual testing in development environment. Build verification via: npm run build && npm run lint
    </locations>
    <ideas>
      <idea ac="2,3">Test drag-and-drop: Drag PDF file onto upload area, verify file appears in store</idea>
      <idea ac="3">Test click-to-browse: Click upload area, select PDF via file picker, verify upload</idea>
      <idea ac="4,5">Test validation: Try non-PDF file (expect error), try 11MB file (expect error)</idea>
      <idea ac="6">Test file display: Upload file, verify filename shows, size formatted correctly ("2.5 MB"), placeholder for page count</idea>
      <idea ac="7">Test remove: Upload file, click remove button, verify file cleared from display and store</idea>
      <idea ac="8">Test visual states: Empty state shows upload instructions, uploaded state shows file card, error state shows red border with message</idea>
      <idea ac="9">Test Zustand integration: Upload file, verify uploadedFile state updated, verify state persists across re-renders</idea>
      <idea ac="10">Test styling: Verify card has dashed border in empty state, solid border when file uploaded</idea>
      <idea ac="1">Test layout: Verify component appears below FieldTagsArea in left panel, no layout issues</idea>
    </ideas>
  </tests>
</story-context>